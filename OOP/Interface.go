package OOP

import "fmt"

//–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ‚Äî —ç—Ç–æ –Ω–∞–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–∏–ø.
//–ï—Å–ª–∏ —Ç–∏–ø —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ‚Üí –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–µ–∑ implements –∏ —Ç.–¥.
//–ø—É—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª—é–±–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö

type Speaker interface {
	Speak() string
}

type Dog struct{}

func (d Dog) Speak() string {
	return "Woof!"
}

type Cat struct{}

func (c Cat) Speak() string {
	return "Meow!"
}

func makeItSpeak(s Speaker) {
	fmt.Println(s.Speak())
}

func main() {
	dog := Dog{}
	cat := Cat{}

	makeItSpeak(dog) // Woof!
	makeItSpeak(cat) // Meow!
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:
type Reader interface {
	Read(p []byte) (n int, err error)
}

type Writer interface {
	Write(p []byte) (n int, err error)
}

type ReadWriter interface {
	Reader
	Writer
}

//–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
//–ò –∏–Ω—Ç–µ—Ä–ø–µ—Ç–∏—Ä—É–µ—Ç—Å—è —ç—Ç–æ –∫–∞–∫:
//üëâ "–Ø –æ–∂–∏–¥–∞—é —Ç–∏–ø, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã."

type Greeter interface {
	Greet() string
}

type PersonExample struct {
	Name string
}

func (p PersonExample) Greet() string {
	return "Hello, my name is " + p.Name
}

func NewGreeter(name string) Greeter {
	return PersonExample{Name: name}
}
