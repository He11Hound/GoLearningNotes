package Multithreading

import (
	"fmt"
	"time"
)

//Что такое горутина?
//Горутины - это основная, киллер фича голэнга
//Горутина - это лёгкий поток исполнения, управляемый самим Go-рантаймом
//Они намного дешевле чем системные потоки (из могут быть десятки тысяч одновременно)
//Go-рантайм планировщик сам распределяет горутины по потокам ОС.

//Ход работы:
//Если перед вызовом какой-либо функции мы поставим go - то данная функция стартует асинхронно, а текущий код пойдёт дальше, то есть никто не будет ждать пока горутина закончится
//Когда контекст текущей функции завершится, завершатся все описанные в ней горутины
//Поэтому чтобы все горутины отработали используется sync.WaitGroup или каналы

//Заметки под капотом:
//У нас в один момент не может истинно выполнятся больше горутин, чем ядер в процессе
//Порядок запуска горутин не гарантирован

func SimpleExample() {
	sayHi := func(goroutinNumber int) {
		for i := 0; i < 3; i++ {
			fmt.Println("Горутина", goroutinNumber, "говорит привет", i, "раз")
			time.Sleep(250 * time.Millisecond)
		}
	}

	go sayHi(1)
	go sayHi(2)
	go sayHi(3)

	time.Sleep(5 * time.Second)
}
