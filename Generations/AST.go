package Generations

import (
	"go/ast"
	"go/parser"
	"go/token"
)

/*
AST (Abstract Syntax Tree) в программировании — абстрактное синтаксическое дерево — структура данных, которая представляет синтаксическую структуру программы. Это промежуточное представление кода, генерируемое компилятором или интерпретатором.

На начальной стадии компилятор разбирает исходный код, формируя абстрактное синтаксическое дерево (Abstract Syntax Tree, или AST).
Пакеты go/* позволяют разработчику получать AST исходного кода, анализировать его, вносить коррективы на уровне синтаксического дерева и даже генерировать новый исходный код. Вот эти пакеты:

	go/ast декларирует типы, составляющие AST;
	go/parser разбирает исходный код в эти типы;
	go/printer преобразует AST в исходный код;
	go/token привязывает токены разбора к файлам исходного кода.

Пакет go/ast — это в первую очередь часть компилятора Go
*/

func GetAstTree() {
	// исходный код, который будем разбирать
	src := `package main
	import "fmt"
	
	func main() {
		fmt.Println("Hello, world!")
	}`

	// дерево разбора AST ассоциируется с набором исходных файлов FileSet
	fset := token.NewFileSet()

	// парсер может работать с файлом
	// или исходным кодом, переданным в виде строки
	f, err := parser.ParseFile(fset, "", src, 0)
	if err != nil {
		panic(err)
	}

	// печатаем дерево
	ast.Print(fset, f)
}

/*
Обход AST
После того как AST построено, можно его обойти и получить подробную информацию о каждом узле. Обход дерева позволяет проанализировать исходный код и при необходимости внести в AST изменения.
Обход делается функцией ast.Inspect(node Node, f func(Node) bool), начиная с указанного узла (node).
*/

//ast.Inspect(node, func(n ast.Node) bool {
//	// логика обработки
//	ast.Print(fset, n)
//	return true
//})

/*
AST для кодогенерации
Для сложных задач кодогенерации необходимо глубже понимать структуру и семантику кода. На помощь приходят абстрактные синтаксические деревья (AST). Вместо работы с текстом на уровне строк, как в простой кодогенерации, AST позволяет анализировать и модифицировать код на уровне его структуры и смысловых связей.
Используя AST, можно создавать инструменты, которые не только генерируют новый код, но и способны адаптироваться к уже написанному, изменяя и расширяя его согласно заданным правилам.
*/

// -- Это пока что-то на тотал сложном --
