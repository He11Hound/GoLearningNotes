package structures

/*
	ОБЗОР ПАКЕТА OS И ЕГО СТРУКТУР

	Пакет os предоставляет платформо-независимый интерфейс для работы с операционной системой.
	Основные функции включают работу с файлами, процессами, переменными окружения и системными вызовами.

	ОСНОВНЫЕ СТРУКТУРЫ И ИНТЕРФЕЙСЫ:

	1. File - основная структура для работы с файлами
	   - Представляет открытый файл или директорию
	   - Содержит методы для чтения, записи, управления файлом
	   - Файл: FileStruct.go

	2. FileInfo - интерфейс для получения информации о файле
	   - Предоставляет метаданные файла (размер, права, время модификации)
	   - Используется в методах File.Stat() и File.Readdir()
	   - Файл: FileInfoStruct.go

	3. FileMode - тип для представления режима файла
	   - Битовая маска прав доступа и типа файла
	   - Используется для установки и проверки прав доступа
	   - Файл: FileModeStruct.go

	4. DirEntry - интерфейс для записей директории
	   - Эффективный способ получения информации о файлах в директории
	   - Предоставляет быстрый доступ к базовой информации
	   - Файл: DirEntryStruct.go

	5. Process - структура для управления внешними процессами
	   - Представляет запущенный процесс
	   - Методы для ожидания завершения, отправки сигналов
	   - Файл: ProcessStruct.go

	6. ProcessState - структура состояния завершенного процесса
	   - Содержит информацию о завершении процесса
	   - Код выхода, время выполнения, использование ресурсов
	   - Файл: ProcessStateStruct.go

	7. SyscallError - структура для ошибок системных вызовов
	   - Обертывает системные ошибки с контекстом
	   - Содержит имя системного вызова и оригинальную ошибку
	   - Файл: SyscallErrorStruct.go

	СВЯЗИ МЕЖДУ СТРУКТУРАМИ:

	File <---> FileInfo
	├── File.Stat() возвращает FileInfo
	├── File.Readdir() возвращает []FileInfo
	└── File.Chmod() принимает FileMode

	File <---> DirEntry
	├── File.ReadDir() возвращает []DirEntry
	└── DirEntry.Info() возвращает FileInfo

	Process <---> ProcessState
	├── Process.Wait() возвращает ProcessState
	└── ProcessState содержит информацию о завершении Process

	FileMode <---> FileInfo
	├── FileInfo.Mode() возвращает FileMode
	└── FileMode используется для установки прав через File.Chmod()

	SyscallError
	├── Обертывает ошибки из всех системных вызовов
	├── Используется в методах File, Process
	└── Содержит контекст о том, какой вызов вызвал ошибку

	ОСНОВНЫЕ ПАТТЕРНЫ ИСПОЛЬЗОВАНИЯ:

	1. Работа с файлами:
	   file, err := os.Open("filename")
	   info, err := file.Stat()
	   mode := info.Mode()
	   err = file.Chmod(0644)

	2. Чтение директории:
	   entries, err := os.ReadDir(".")
	   for _, entry := range entries {
	       if entry.IsDir() {
	           // обработка директории
	       }
	   }

	3. Управление процессами:
	   process, err := os.StartProcess(...)
	   state, err := process.Wait()
	   if state.Success() {
	       // процесс завершился успешно
	   }

	4. Обработка ошибок:
	   if err != nil {
	       var sysErr *os.SyscallError
	       if errors.As(err, &sysErr) {
	           // обработка системной ошибки
	       }
	   }

	ПЛАТФОРМО-ЗАВИСИМЫЕ ОСОБЕННОСТИ:

	- Unix системы: полная поддержка сигналов, временных файлов, символических ссылок
	- Windows: ограниченная поддержка сигналов, другие коды ошибок
	- Некоторые методы (UserTime, SystemTime) работают только на Unix

	РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ:

	1. Всегда проверяйте ошибки после операций с файлами
	2. Используйте defer file.Close() для автоматического закрытия файлов
	3. DirEntry более эффективен для итерации по директориям
	4. Process.Release() должен вызываться для освобождения ресурсов
	5. Используйте errors.Is() и errors.As() для обработки ошибок

	АЛЬТЕРНАТИВЫ И ДОПОЛНЕНИЯ:

	- io/fs: более современный интерфейс для работы с файловой системой
	- exec: высокоуровневый API для запуска процессов
	- path/filepath: работа с путями файлов
	- syscall: низкоуровневые системные вызовы

*/
