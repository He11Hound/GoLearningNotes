package os

/*
	ФУНКЦИИ ПАКЕТА OS

	Пакет os предоставляет множество функций для работы с операционной системой.
	Эти функции можно разделить на несколько категорий по функциональности.

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ ===

	func Open(name string) (*File, error)
		- Открывает файл для чтения
		- Возвращает *File и error
		- Файл должен существовать
		- Эквивалентно OpenFile(name, O_RDONLY, 0)

	func Create(name string) (*File, error)
		- Создает новый файл или обрезает существующий до нуля
		- Открывает файл для записи
		- Права доступа: 0666 (rw-rw-rw-)
		- Эквивалентно OpenFile(name, O_RDWR|O_CREATE|O_TRUNC, 0666)

	func OpenFile(name string, flag int, perm FileMode) (*File, error)
		- Универсальная функция для открытия файлов
		- flag: флаги открытия (O_RDONLY, O_WRONLY, O_RDWR, O_CREAT, O_TRUNC, O_APPEND)
		- perm: права доступа для новых файлов
		- Наиболее гибкий способ открытия файлов

	func Stat(name string) (FileInfo, error)
		- Получает информацию о файле по имени
		- Следует символическим ссылкам
		- Возвращает FileInfo с метаданными файла

	func Lstat(name string) (FileInfo, error)
		- Получает информацию о файле, не следуя символическим ссылкам
		- Возвращает информацию о самой ссылке, а не о файле, на который она указывает
		- Полезно для работы с символическими ссылками

	func ReadFile(name string) ([]byte, error)
		- Читает весь файл в память
		- Возвращает содержимое файла как []byte
		- Удобно для небольших файлов
		- Автоматически закрывает файл

	func WriteFile(name string, data []byte, perm FileMode) error
		- Записывает данные в файл
		- Создает файл если не существует
		- Обрезает файл до нуля перед записью
		- Автоматически закрывает файл

	func ReadDir(name string) ([]DirEntry, error)
		- Читает содержимое директории
		- Возвращает []DirEntry для эффективного чтения
		- Современная альтернатива Readdir

	func Readdir(name string) ([]FileInfo, error)
		- Читает содержимое директории (устаревший метод)
		- Возвращает []FileInfo с полной информацией
		- Менее эффективен чем ReadDir

	func Readdirnames(name string) ([]string, error)
		- Возвращает только имена файлов в директории
		- Самый быстрый способ получить список имен
		- Не предоставляет информацию о типах файлов

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С ДИРЕКТОРИЯМИ ===

	func Mkdir(name string, perm FileMode) error
		- Создает директорию
		- perm: права доступа для новой директории
		- Не создает родительские директории
		- Возвращает ошибку если директория уже существует

	func MkdirAll(path string, perm FileMode) error
		- Создает директорию и все необходимые родительские директории
		- Не возвращает ошибку если директория уже существует
		- Полезно для создания сложных путей

	func Remove(name string) error
		- Удаляет файл или пустую директорию
		- Не удаляет непустые директории
		- Возвращает ошибку если файл не существует

	func RemoveAll(path string) error
		- Удаляет файл или директорию со всем содержимым
		- Опасная операция - удаляет все рекурсивно
		- Не возвращает ошибку если файл не существует

	func Rename(oldpath, newpath string) error
		- Переименовывает или перемещает файл/директорию
		- Работает в пределах одной файловой системы
		- Атомарная операция

	func Truncate(name string, size int64) error
		- Изменяет размер файла
		- Если size меньше текущего размера - обрезает файл
		- Если size больше - расширяет файл нулями

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С ПРОЦЕССАМИ ===

	func Getpid() int
		- Возвращает идентификатор текущего процесса (PID)
		- Уникальный номер процесса в системе

	func Getppid() int
		- Возвращает идентификатор родительского процесса
		- PID процесса, который создал текущий процесс

	func Getuid() int
		- Возвращает user ID текущего пользователя
		- Работает только на Unix-системах
		- На Windows возвращает -1

	func Getgid() int
		- Возвращает group ID текущего пользователя
		- Работает только на Unix-системах
		- На Windows возвращает -1

	func Geteuid() int
		- Возвращает effective user ID
		- Работает только на Unix-системах
		- На Windows возвращает -1

	func Getegid() int
		- Возвращает effective group ID
		- Работает только на Unix-системах
		- На Windows возвращает -1

	func Exit(code int)
		- Завершает программу с указанным кодом выхода
		- Немедленно завершает выполнение
		- Не выполняет отложенные функции defer

	func Getwd() (dir string, err error)
		- Возвращает текущую рабочую директорию
		- Абсолютный путь к текущей директории

	func Chdir(dir string) error
		- Изменяет текущую рабочую директорию
		- Влияет на все последующие операции с относительными путями

	func StartProcess(name string, argv []string, attr *ProcAttr) (*Process, error)
		- Запускает новый процесс
		- name: имя программы или путь к исполняемому файлу
		- argv: аргументы командной строки
		- attr: атрибуты процесса (рабочая директория, переменные окружения, файловые дескрипторы)

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С ПЕРЕМЕННЫМИ ОКРУЖЕНИЯ ===

	func Getenv(key string) string
		- Возвращает значение переменной окружения
		- Возвращает пустую строку если переменная не установлена
		- Не различает отсутствие переменной и пустое значение

	func Setenv(key, value string) error
		- Устанавливает значение переменной окружения
		- Изменения применяются только к текущему процессу
		- Наследуются дочерними процессами

	func Unsetenv(key string) error
		- Удаляет переменную окружения
		- Переменная перестает существовать для текущего процесса
		- Не влияет на родительский процесс

	func Environ() []string
		- Возвращает все переменные окружения
		- Формат: "KEY=value"
		- Полезно для копирования окружения

	func LookupEnv(key string) (string, bool)
		- Возвращает значение переменной окружения и флаг существования
		- Позволяет различить отсутствие переменной и пустое значение
		- Более надежный способ проверки переменных

	func ExpandEnv(s string) string
		- Заменяет переменные окружения в строке
		- Формат: $VAR или ${VAR}
		- Полезно для обработки шаблонов

	func Expand(s string, mapping func(string) string) string
		- Заменяет переменные в строке используя пользовательскую функцию
		- Более гибкий способ замены переменных
		- Позволяет кастомную логику обработки

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С ПРАВАМИ ДОСТУПА ===

	func Chmod(name string, mode FileMode) error
		- Изменяет права доступа к файлу или директории
		- mode: новые права доступа (например, 0644)
		- Работает на всех платформах

	func Chown(name string, uid, gid int) error
		- Изменяет владельца файла или директории
		- uid: user ID нового владельца
		- gid: group ID новой группы
		- Работает только на Unix-системах

	func Lchown(name string, uid, gid int) error
		- Изменяет владельца символической ссылки (не файла, на который она указывает)
		- Работает только на Unix-системах
		- Полезно для работы с символическими ссылками

	func Getgroups() ([]int, error)
		- Возвращает список групп, к которым принадлежит текущий пользователь
		- Работает только на Unix-системах
		- На Windows возвращает ошибку

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С СИМВОЛИЧЕСКИМИ ССЫЛКАМИ ===

	func Readlink(name string) (string, error)
		- Читает содержимое символической ссылки
		- Возвращает путь, на который указывает ссылка
		- Работает только на Unix-системах

	func Symlink(oldname, newname string) error
		- Создает символическую ссылку
		- oldname: путь к файлу, на который указывает ссылка
		- newname: имя символической ссылки
		- Работает только на Unix-системах

	func Link(oldname, newname string) error
		- Создает жесткую ссылку
		- oldname: существующий файл
		- newname: имя новой ссылки
		- Работает только на Unix-системах

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С ВРЕМЕННЫМИ ФАЙЛАМИ ===

	func TempDir() string
		- Возвращает директорию для временных файлов
		- Обычно /tmp на Unix, %TEMP% на Windows
		- Может быть изменена через переменную окружения TMPDIR

	func CreateTemp(dir, pattern string) (*File, error)
		- Создает временный файл
		- dir: директория для создания файла ("" = TempDir())
		- pattern: шаблон имени файла (например, "prefix*")
		- Возвращает открытый файл

	func MkdirTemp(dir, pattern string) (string, error)
		- Создает временную директорию
		- dir: родительская директория ("" = TempDir())
		- pattern: шаблон имени директории
		- Возвращает путь к созданной директории

	=== ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ ОБРАБОТКИ ОШИБОК ===

	func IsExist(err error) bool
		- Проверяет, является ли ошибка "файл уже существует"
		- Полезно для обработки ошибок создания файлов
		- Возвращает true если файл уже существует

	func IsNotExist(err error) bool
		- Проверяет, является ли ошибка "файл не существует"
		- Полезно для проверки существования файлов
		- Возвращает true если файл не найден

	func IsPermission(err error) bool
		- Проверяет, является ли ошибка связанной с правами доступа
		- Полезно для обработки ошибок доступа
		- Возвращает true если недостаточно прав

	func IsTimeout(err error) bool
		- Проверяет, является ли ошибка связанной с таймаутом
		- Полезно для обработки сетевых операций
		- Возвращает true если операция превысила время ожидания

	func IsPathSeparator(c uint8) bool
		- Проверяет, является ли символ разделителем пути
		- Возвращает true для '/' на Unix и '\' на Windows
		- Полезно для работы с путями
*/
