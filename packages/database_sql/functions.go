package database_sql

/*
	ФУНКЦИИ ПАКЕТА DATABASE/SQL

	Пакет database/sql предоставляет универсальный интерфейс для работы
	с SQL-базами данных. Это стандартный пакет Go для работы с реляционными
	базами данных, который поддерживает различные драйверы баз данных.

	=== ОСНОВНЫЕ ФУНКЦИИ ДЛЯ ПОДКЛЮЧЕНИЯ ===

	func Open(driverName, dataSourceName string) (*DB, error)
		- Открывает соединение с базой данных
		- driverName: имя драйвера (mysql, postgres, sqlite3 и т.д.)
		- dataSourceName: строка подключения к базе данных
		- Возвращает объект DB для работы с базой
		- Не устанавливает реальное соединение до первого запроса

	func OpenDB(c driver.Connector) *DB
		- Открывает соединение используя драйвер Connector
		- Более гибкий способ подключения
		- Позволяет настройку параметров подключения
		- Используется для продвинутых сценариев

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С СОЕДИНЕНИЯМИ ===

	func (db *DB) Close() error
		- Закрывает все соединения с базой данных
		- Освобождает все ресурсы
		- Должен вызываться при завершении работы

	func (db *DB) Ping() error
		- Проверяет соединение с базой данных
		- Возвращает ошибку если соединение недоступно
		- Полезно для проверки состояния подключения

	func (db *DB) Stats() DBStats
		- Возвращает статистику использования соединений
		- Содержит информацию о пуле соединений
		- Полезно для мониторинга производительности

	=== ФУНКЦИИ ДЛЯ ВЫПОЛНЕНИЯ ЗАПРОСОВ ===

	func (db *DB) Exec(query string, args ...interface{}) (Result, error)
		- Выполняет SQL-запрос без возврата данных
		- Используется для INSERT, UPDATE, DELETE
		- Возвращает Result с информацией о выполненной операции
		- args: параметры для запроса

	func (db *DB) Query(query string, args ...interface{}) (*Rows, error)
		- Выполняет SQL-запрос с возвратом данных
		- Используется для SELECT запросов
		- Возвращает Rows для итерации по результатам
		- args: параметры для запроса

	func (db *DB) QueryRow(query string, args ...interface{}) *Row
		- Выполняет SQL-запрос ожидая одну строку результата
		- Используется для SELECT запросов с одним результатом
		- Возвращает Row для сканирования результата
		- args: параметры для запроса

	=== ФУНКЦИИ ДЛЯ ПОДГОТОВКИ ЗАПРОСОВ ===

	func (db *DB) Prepare(query string) (*Stmt, error)
		- Подготавливает SQL-запрос для многократного использования
		- Повышает производительность при повторных запросах
		- Возвращает Stmt для выполнения подготовленного запроса
		- Защищает от SQL-инъекций

	=== ФУНКЦИИ ДЛЯ ТРАНЗАКЦИЙ ===

	func (db *DB) Begin() (*Tx, error)
		- Начинает новую транзакцию
		- Возвращает объект Tx для работы с транзакцией
		- Все операции в транзакции выполняются атомарно
		- Должна быть завершена Commit() или Rollback()

	func (db *DB) BeginTx(ctx context.Context, opts *TxOptions) (*Tx, error)
		- Начинает транзакцию с контекстом и опциями
		- Позволяет настройку уровня изоляции
		- Поддерживает отмену через контекст
		- Более гибкий способ работы с транзакциями

	=== ФУНКЦИИ ДЛЯ НАСТРОЙКИ ===

	func (db *DB) SetConnMaxLifetime(d time.Duration)
		- Устанавливает максимальное время жизни соединения
		- Соединения закрываются после указанного времени
		- Полезно для обновления соединений

	func (db *DB) SetMaxOpenConns(n int)
		- Устанавливает максимальное количество открытых соединений
		- Ограничивает нагрузку на базу данных
		- Полезно для контроля ресурсов

	func (db *DB) SetMaxIdleConns(n int)
		- Устанавливает максимальное количество неактивных соединений
		- Соединения остаются открытыми в пуле
		- Полезно для производительности

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С РЕЗУЛЬТАТАМИ ===

	func (r *Result) LastInsertId() (int64, error)
		- Возвращает ID последней вставленной записи
		- Работает только с таблицами с автоинкрементом
		- Возвращает ошибку если не поддерживается

	func (r *Result) RowsAffected() (int64, error)
		- Возвращает количество затронутых строк
		- Полезно для проверки успешности операций
		- Работает с INSERT, UPDATE, DELETE

	=== ФУНКЦИИ ДЛЯ СКАНИРОВАНИЯ ДАННЫХ ===

	func (r *Row) Scan(dest ...interface{}) error
		- Сканирует одну строку результата в переменные
		- dest: указатели на переменные для сохранения данных
		- Возвращает ошибку если строка не найдена
		- Автоматически преобразует типы данных

	func (rs *Rows) Scan(dest ...interface{}) error
		- Сканирует текущую строку результата
		- Используется в цикле с Next()
		- dest: указатели на переменные
		- Автоматически преобразует типы данных

	func (rs *Rows) Next() bool
		- Переходит к следующей строке результата
		- Возвращает false если строк больше нет
		- Должен вызываться перед Scan()
		- Автоматически закрывает Rows при завершении

	func (rs *Rows) Close() error
		- Закрывает Rows и освобождает ресурсы
		- Должен вызываться после завершения работы
		- Автоматически вызывается при достижении конца

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С КОЛОНКАМИ ===

	func (rs *Rows) Columns() ([]string, error)
		- Возвращает имена колонок результата
		- Полезно для динамической работы с данными
		- Возвращает ошибку если Rows закрыт

	func (rs *Rows) ColumnTypes() ([]*ColumnType, error)
		- Возвращает информацию о типах колонок
		- Содержит детальную информацию о типах данных
		- Полезно для динамической обработки данных

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С ТРАНЗАКЦИЯМИ ===

	func (tx *Tx) Commit() error
		- Подтверждает транзакцию
		- Сохраняет все изменения в базе данных
		- Освобождает ресурсы транзакции

	func (tx *Tx) Rollback() error
		- Отменяет транзакцию
		- Откатывает все изменения
		- Освобождает ресурсы транзакции

	func (tx *Tx) Exec(query string, args ...interface{}) (Result, error)
		- Выполняет запрос в рамках транзакции
		- Аналогично db.Exec но в транзакции

	func (tx *Tx) Query(query string, args ...interface{}) (*Rows, error)
		- Выполняет запрос в рамках транзакции
		- Аналогично db.Query но в транзакции

	func (tx *Tx) QueryRow(query string, args ...interface{}) *Row
		- Выполняет запрос в рамках транзакции
		- Аналогично db.QueryRow но в транзакции

	func (tx *Tx) Prepare(query string) (*Stmt, error)
		- Подготавливает запрос в рамках транзакции
		- Аналогично db.Prepare но в транзакции

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С ПОДГОТОВЛЕННЫМИ ЗАПРОСАМИ ===

	func (s *Stmt) Exec(args ...interface{}) (Result, error)
		- Выполняет подготовленный запрос
		- args: параметры для запроса
		- Более эффективен чем обычные запросы

	func (s *Stmt) Query(args ...interface{}) (*Rows, error)
		- Выполняет подготовленный запрос с результатом
		- args: параметры для запроса
		- Возвращает Rows для итерации

	func (s *Stmt) QueryRow(args ...interface{}) *Row
		- Выполняет подготовленный запрос с одним результатом
		- args: параметры для запроса
		- Возвращает Row для сканирования

	func (s *Stmt) Close() error
		- Закрывает подготовленный запрос
		- Освобождает ресурсы
		- Должен вызываться после завершения работы

	=== ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ ===

	// Подключение к базе данных
	db, err := sql.Open("mysql", "user:password@/dbname")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	// Проверка соединения
	err = db.Ping()
	if err != nil {
		log.Fatal(err)
	}

	// Выполнение запроса
	result, err := db.Exec("INSERT INTO users (name) VALUES (?)", "John")
	if err != nil {
		log.Fatal(err)
	}

	// Получение ID вставленной записи
	id, err := result.LastInsertId()
	fmt.Printf("Вставлена запись с ID: %d\n", id)

	// Выполнение SELECT запроса
	rows, err := db.Query("SELECT id, name FROM users")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()

	// Итерация по результатам
	for rows.Next() {
		var id int
		var name string
		err := rows.Scan(&id, &name)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Printf("ID: %d, Name: %s\n", id, name)
	}

	// Работа с транзакциями
	tx, err := db.Begin()
	if err != nil {
		log.Fatal(err)
	}
	defer tx.Rollback()

	_, err = tx.Exec("INSERT INTO users (name) VALUES (?)", "Alice")
	if err != nil {
		log.Fatal(err)
	}

	err = tx.Commit()
	if err != nil {
		log.Fatal(err)
	}
*/
