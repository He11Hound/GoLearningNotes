package log

/*
	ПАКЕТ LOG - ОБЗОР

	Пакет log предоставляет простой интерфейс для логирования сообщений
	в приложениях Go. Это часть стандартной библиотеки и один из наиболее
	часто используемых пакетов для записи логов.

	=== ОСНОВНЫЕ ВОЗМОЖНОСТИ ===

	1. Простое логирование
		- Print(), Printf(), Println() для обычных сообщений
		- Автоматическое добавление временных меток
		- Настраиваемые префиксы

	2. Критические ошибки
		- Fatal(), Fatalf(), Fatalln() для завершения программы
		- Автоматический вызов os.Exit(1)
		- Используется для невосстановимых ошибок

	3. Паника
		- Panic(), Panicf(), Panicln() для вызова panic
		- Используется для невосстановимых ошибок
		- Может быть перехвачена с помощью recover()

	4. Настройка форматирования
		- SetFlags() для управления форматом
		- SetPrefix() для добавления префиксов
		- SetOutput() для перенаправления вывода

	5. Кастомные логгеры
		- New() для создания новых экземпляров
		- Независимые настройки для каждого логгера
		- Разные места вывода для разных типов сообщений

	=== СТРУКТУРА ПАКЕТА ===

	Функции:
	- functions.go - описание всех функций пакета
	- examples.go - примеры использования функций

	Константы:
	- constants.go - флаги форматирования и константы

	Структуры:
	- structures/LoggerStruct.go - описание структуры Logger

	=== ФЛАГИ ФОРМАТИРОВАНИЯ ===

	Ldate - дата (2009/01/23)
	Ltime - время (01:23:23)
	Lmicroseconds - микросекунды
	Llongfile - полный путь к файлу
	Lshortfile - имя файла
	LUTC - время в UTC
	LstdFlags - стандартные флаги

	=== ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ ===

	// Простое логирование
	log.Print("Сообщение")
	log.Printf("Формат: %s", "значение")

	// Критические ошибки
	log.Fatal("Критическая ошибка")

	// Настройка
	log.SetFlags(log.Ldate | log.Ltime)
	log.SetPrefix("APP: ")

	// Кастомный логгер
	logger := log.New(os.Stdout, "CUSTOM: ", log.LstdFlags)

	=== РЕКОМЕНДАЦИИ ===

	1. Используйте разные логгеры для разных типов сообщений
	2. Настройте флаги в зависимости от среды (dev/prod)
	3. Используйте префиксы для идентификации модулей
	4. Перенаправляйте логи в файлы для продакшена
	5. Используйте Fatal только для критических ошибок
	6. Рассмотрите использование внешних библиотек для сложных случаев

	=== АЛЬТЕРНАТИВЫ ===

	Для более сложных случаев рассмотрите:
	- logrus - структурированное логирование
	- zap - высокопроизводительное логирование
	- zerolog - быстрый и простой логгер
	- slog - новый стандартный пакет (Go 1.21+)
*/
