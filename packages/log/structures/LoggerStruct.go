package log

/*
	СТРУКТУРА LOGGER

	type Logger struct {
		mu     sync.Mutex // обеспечивает атомарность операций записи
		prefix string     // префикс для всех сообщений
		flag   int        // флаги форматирования
		out    io.Writer  // место вывода сообщений
		buf    []byte     // буфер для форматирования
	}

	Logger представляет активный объект для записи логов.
	Каждый Logger имеет собственные настройки форматирования,
	префикс и место вывода сообщений.

	Основные поля:

	mu sync.Mutex
		- Мьютекс для обеспечения потокобезопасности
		- Защищает от одновременной записи из разных горутин
		- Автоматически блокируется при записи

	prefix string
		- Префикс для всех сообщений логгера
		- Добавляется к каждому сообщению
		- Может быть пустой строкой

	flag int
		- Флаги форматирования (Ldate, Ltime, Lshortfile и т.д.)
		- Определяют формат временных меток и префиксов
		- Комбинируются с помощью битовых операций

	out io.Writer
		- Место вывода сообщений
		- Может быть файл, буфер, os.Stdout, os.Stderr
		- Определяет куда записываются логи

	buf []byte
		- Внутренний буфер для форматирования
		- Используется для построения строки сообщения
		- Переиспользуется для оптимизации памяти

	Основные методы:

	func (l *Logger) Print(v ...interface{})
		- Выводит сообщение в логгер
		- Использует текущие настройки форматирования
		- Потокобезопасный метод

	func (l *Logger) Printf(format string, v ...interface{})
		- Выводит форматированное сообщение
		- Поддерживает форматирование как fmt.Printf
		- Добавляет временную метку и префикс

	func (l *Logger) Println(v ...interface{})
		- Выводит сообщение с переносом строки
		- Добавляет пробелы между аргументами
		- Завершает сообщение символом новой строки

	func (l *Logger) Fatal(v ...interface{})
		- Выводит сообщение и завершает программу
		- Эквивалентно Print() + os.Exit(1)
		- Используется для критических ошибок

	func (l *Logger) Fatalf(format string, v ...interface{})
		- Выводит форматированное сообщение и завершает программу
		- Эквивалентно Printf() + os.Exit(1)
		- Используется для критических ошибок

	func (l *Logger) Fatalln(v ...interface{})
		- Выводит сообщение с переносом строки и завершает программу
		- Эквивалентно Println() + os.Exit(1)
		- Используется для критических ошибок

	func (l *Logger) Panic(v ...interface{})
		- Выводит сообщение и вызывает panic
		- Эквивалентно Print() + panic()
		- Используется для невосстановимых ошибок

	func (l *Logger) Panicf(format string, v ...interface{})
		- Выводит форматированное сообщение и вызывает panic
		- Эквивалентно Printf() + panic()
		- Используется для невосстановимых ошибок

	func (l *Logger) Panicln(v ...interface{})
		- Выводит сообщение с переносом строки и вызывает panic
		- Эквивалентно Println() + panic()
		- Используется для невосстановимых ошибок

	func (l *Logger) SetFlags(flag int)
		- Устанавливает флаги форматирования
		- Влияет на формат временных меток и префиксов
		- Применяется ко всем последующим сообщениям

	func (l *Logger) SetPrefix(prefix string)
		- Устанавливает префикс для всех сообщений
		- Добавляется к каждому сообщению
		- Может быть пустой строкой

	func (l *Logger) SetOutput(w io.Writer)
		- Устанавливает место вывода сообщений
		- Может быть файл, буфер, os.Stdout, os.Stderr
		- Изменяется для всех последующих сообщений

	func (l *Logger) Flags() int
		- Возвращает текущие флаги форматирования
		- Показывает настройки логгера

	func (l *Logger) Prefix() string
		- Возвращает текущий префикс
		- Показывает установленный префикс

	func (l *Logger) Output(calldepth int, s string) error
		- Записывает сообщение в логгер
		- calldepth: глубина стека вызовов
		- s: сообщение для записи
		- Возвращает ошибку если запись не удалась

	Особенности работы:
	- Logger потокобезопасен благодаря мьютексу
	- Каждый Logger независим от других
	- Настройки применяются только к конкретному логгеру
	- Буфер переиспользуется для оптимизации
	- Методы Fatal и Panic завершают выполнение программы

	Связь с другими структурами:
	- Logger использует io.Writer для вывода
	- Logger может работать с os.File для записи в файлы
	- Logger интегрируется с os.Stdout и os.Stderr
	- Logger использует sync.Mutex для синхронизации
*/
