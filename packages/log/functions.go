package log

/*
	ФУНКЦИИ ПАКЕТА LOG

	Пакет log предоставляет функции для логирования сообщений.
	Этот пакет является частью стандартной библиотеки Go и предоставляет
	простой интерфейс для записи логов с различными уровнями важности.

	=== ОСНОВНЫЕ ФУНКЦИИ ЛОГИРОВАНИЯ ===

	func Print(v ...interface{})
		- Выводит сообщение в стандартный логгер
		- Использует формат по умолчанию
		- Добавляет временную метку и префикс

	func Printf(format string, v ...interface{})
		- Выводит форматированное сообщение в стандартный логгер
		- Поддерживает форматирование как fmt.Printf
		- Добавляет временную метку и префикс

	func Println(v ...interface{})
		- Выводит сообщение с переносом строки в стандартный логгер
		- Добавляет пробелы между аргументами
		- Добавляет временную метку и префикс

	func Fatal(v ...interface{})
		- Выводит сообщение и завершает программу с кодом 1
		- Эквивалентно Print() + os.Exit(1)
		- Используется для критических ошибок

	func Fatalf(format string, v ...interface{})
		- Выводит форматированное сообщение и завершает программу
		- Эквивалентно Printf() + os.Exit(1)
		- Используется для критических ошибок с форматированием

	func Fatalln(v ...interface{})
		- Выводит сообщение с переносом строки и завершает программу
		- Эквивалентно Println() + os.Exit(1)
		- Используется для критических ошибок

	func Panic(v ...interface{})
		- Выводит сообщение и вызывает panic
		- Эквивалентно Print() + panic()
		- Используется для невосстановимых ошибок

	func Panicf(format string, v ...interface{})
		- Выводит форматированное сообщение и вызывает panic
		- Эквивалентно Printf() + panic()
		- Используется для невосстановимых ошибок с форматированием

	func Panicln(v ...interface{})
		- Выводит сообщение с переносом строки и вызывает panic
		- Эквивалентно Println() + panic()
		- Используется для невосстановимых ошибок

	=== ФУНКЦИИ ДЛЯ НАСТРОЙКИ ЛОГГЕРА ===

	func SetFlags(flag int)
		- Устанавливает флаги форматирования для стандартного логгера
		- Влияет на формат временных меток и префиксов
		- Применяется ко всем последующим сообщениям

	func SetPrefix(prefix string)
		- Устанавливает префикс для всех сообщений логгера
		- Добавляется к каждому сообщению
		- Полезно для идентификации источника логов

	func SetOutput(w io.Writer)
		- Устанавливает место вывода для стандартного логгера
		- По умолчанию выводит в os.Stderr
		- Можно перенаправить в файл или другой Writer

	func SetPrefix(prefix string)
		- Устанавливает префикс для всех сообщений
		- Добавляется к каждому сообщению логгера
		- Полезно для разделения логов по модулям

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ ===

	func New(out io.Writer, prefix string, flag int) *Logger
		- Создает новый экземпляр Logger
		- out: место вывода (файл, буфер, os.Stdout)
		- prefix: префикс для всех сообщений
		- flag: флаги форматирования

	=== ФУНКЦИИ ДЛЯ РАБОТЫ С СТАНДАРТНЫМ ЛОГГЕРОМ ===

	func Flags() int
		- Возвращает текущие флаги стандартного логгера
		- Показывает настройки форматирования

	func Prefix() string
		- Возвращает текущий префикс стандартного логгера
		- Показывает установленный префикс

	func Output(calldepth int, s string) error
		- Записывает сообщение в стандартный логгер
		- calldepth: глубина стека вызовов для определения источника
		- s: сообщение для записи
		- Возвращает ошибку если запись не удалась
*/
