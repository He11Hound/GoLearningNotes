package net_rpc

/*
	КОНСТАНТЫ ПАКЕТА NET/RPC

	Пакет net/rpc предоставляет константы для работы с RPC протоколом,
	кодами ошибок и типами сообщений. Эти константы используются
	для стандартизации RPC операций.

	=== КОДЫ ОШИБОК RPC ===

	// Коды ошибок для RPC операций
	ErrShutdown = errors.New("connection is shut down")
		- Ошибка закрытия соединения
		- Возникает при попытке использовать закрытое соединение
		- Используется для проверки состояния соединения

	ErrInvalidRequest = errors.New("invalid request")
		- Ошибка невалидного запроса
		- Возникает при неправильном формате запроса
		- Используется для валидации запросов

	ErrInvalidResponse = errors.New("invalid response")
		- Ошибка невалидного ответа
		- Возникает при неправильном формате ответа
		- Используется для валидации ответов

	ErrMethodNotFound = errors.New("method not found")
		- Ошибка метода не найден
		- Возникает при вызове несуществующего метода
		- Используется для проверки существования методов

	ErrServiceNotFound = errors.New("service not found")
		- Ошибка сервис не найден
		- Возникает при вызове несуществующего сервиса
		- Используется для проверки существования сервисов

	ErrArgsMismatch = errors.New("args mismatch")
		- Ошибка несоответствия аргументов
		- Возникает при неправильных аргументах метода
		- Используется для валидации аргументов

	ErrReplyMismatch = errors.New("reply mismatch")
		- Ошибка несоответствия ответа
		- Возникает при неправильном типе ответа
		- Используется для валидации ответов

	ErrCodecError = errors.New("codec error")
		- Ошибка кодек
		- Возникает при ошибках сериализации/десериализации
		- Используется для обработки ошибок кодек

	ErrServerError = errors.New("server error")
		- Ошибка сервера
		- Возникает при внутренних ошибках сервера
		- Используется для общих ошибок сервера

	ErrClientError = errors.New("client error")
		- Ошибка клиента
		- Возникает при ошибках клиента
		- Используется для общих ошибок клиента

	=== ТИПЫ СООБЩЕНИЙ RPC ===

	// Типы сообщений для RPC протокола
	"request" - запрос к серверу
		- Используется для вызова методов
		- Содержит имя сервиса, метода и аргументы
		- Отправляется клиентом серверу

	"response" - ответ от сервера
		- Используется для возврата результатов
		- Содержит результат выполнения метода
		- Отправляется сервером клиенту

	"error" - ошибка
		- Используется для передачи ошибок
		- Содержит информацию об ошибке
		- Отправляется сервером клиенту

	"notification" - уведомление
		- Используется для уведомлений
		- Не требует ответа
		- Отправляется клиентом серверу

	=== ПРОТОКОЛЫ RPC ===

	"gob" - Gob протокол
		- Бинарный протокол Go
		- Используется для сериализации Go объектов
		- Быстрее чем JSON
		- Поддерживает все типы Go

	"json" - JSON протокол
		- Текстовый протокол JSON
		- Используется для сериализации JSON
		- Медленнее чем Gob
		- Поддерживает ограниченные типы

	"http" - HTTP протокол
		- HTTP протокол для RPC
		- Используется для HTTP RPC
		- Поддерживает прокси и кэширование
		- Работает через веб-серверы

	"tcp" - TCP протокол
		- TCP протокол для RPC
		- Используется для прямых TCP соединений
		- Быстрее чем HTTP
		- Требует прямое соединение

	=== СТАТУСЫ СОЕДИНЕНИЯ ===

	"connected" - соединение установлено
		- Соединение активно и готово к использованию
		- Можно отправлять запросы
		- Используется для проверки состояния

	"disconnected" - соединение разорвано
		- Соединение неактивно
		- Нельзя отправлять запросы
		- Используется для проверки состояния

	"connecting" - соединение устанавливается
		- Соединение в процессе установки
		- Нельзя отправлять запросы
		- Используется для проверки состояния

	"reconnecting" - переподключение
		- Соединение переподключается
		- Нельзя отправлять запросы
		- Используется для проверки состояния

	=== ТИПЫ КОДЕКОВ ===

	"ServerCodec" - кодек сервера
		- Интерфейс для серверных кодек
		- Используется для сериализации/десериализации
		- Поддерживает чтение и запись

	"ClientCodec" - кодек клиента
		- Интерфейс для клиентских кодек
		- Используется для сериализации/десериализации
		- Поддерживает чтение и запись

	"GobServerCodec" - Gob кодек сервера
		- Реализация Gob кодека для сервера
		- Используется для Gob протокола
		- Поддерживает все типы Go

	"GobClientCodec" - Gob кодек клиента
		- Реализация Gob кодека для клиента
		- Используется для Gob протокола
		- Поддерживает все типы Go

	"JSONServerCodec" - JSON кодек сервера
		- Реализация JSON кодека для сервера
		- Используется для JSON протокола
		- Поддерживает ограниченные типы

	"JSONClientCodec" - JSON кодек клиента
		- Реализация JSON кодека для клиента
		- Используется для JSON протокола
		- Поддерживает ограниченные типы

	=== ПУТИ HTTP RPC ===

	"/_goRPC_" - стандартный путь RPC
		- Стандартный путь для RPC запросов
		- Используется по умолчанию
		- Поддерживается всеми клиентами

	"/debug/rpc" - путь отладки RPC
		- Путь для отладочной информации
		- Используется для мониторинга
		- Показывает статистику RPC

	"/rpc" - кастомный путь RPC
		- Кастомный путь для RPC запросов
		- Используется для настройки
		- Может быть изменен

	=== ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ ===

	// Проверка ошибок
	if err == rpc.ErrShutdown {
		fmt.Println("Connection is shut down")
	}
	if err == rpc.ErrMethodNotFound {
		fmt.Println("Method not found")
	}
	if err == rpc.ErrServiceNotFound {
		fmt.Println("Service not found")
	}

	// Проверка типа ошибки
	if rpc.IsError(err) {
		fmt.Println("This is an RPC error")
	}
	if rpc.IsErrorCode(err, 404) {
		fmt.Println("Method not found error")
	}

	// Использование протоколов
	client, err := rpc.Dial("tcp", "localhost:8080")
	client, err := rpc.DialHTTP("tcp", "localhost:8080")
	client, err := rpc.DialHTTPPath("tcp", "localhost:8080", "/rpc")

	// Использование кодек
	conn, _ := net.Dial("tcp", "localhost:8080")
	codec := rpc.NewGobClientCodec(conn)
	client := rpc.NewClientWithCodec(codec)

	conn, _ = net.Dial("tcp", "localhost:8080")
	codec = rpc.NewJSONClientCodec(conn)
	client = rpc.NewClientWithCodec(codec)

	// HTTP пути
	rpc.HandleHTTP()                    // Использует "/_goRPC_"
	rpc.HandleHTTPPath("/rpc")          // Использует "/rpc"

	// Статусы соединения
	if client != nil {
		fmt.Println("Client is connected")
	} else {
		fmt.Println("Client is disconnected")
	}

	// Типы сообщений
	fmt.Println("Request type: request")
	fmt.Println("Response type: response")
	fmt.Println("Error type: error")
	fmt.Println("Notification type: notification")

	=== ОСОБЕННОСТИ РАБОТЫ ===

	1. Коды ошибок
		- Все ошибки имеют предопределенные коды
		- Ошибки могут быть проверены по типу
		- Ошибки содержат дополнительную информацию

	2. Протоколы
		- Gob быстрее чем JSON
		- JSON более совместим
		- HTTP поддерживает прокси

	3. Кодеки
		- Кодеки управляют сериализацией
		- Можно создавать кастомные кодеки
		- Кодеки должны быть совместимы

	4. Пути HTTP
		- Пути настраиваются при регистрации
		- Стандартные пути работают везде
		- Кастомные пути требуют настройки

	=== РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ===

	1. Выбор протокола
		- Используйте Gob для внутренних сервисов
		- Используйте JSON для внешних API
		- Используйте HTTP для веб-интеграции

	2. Обработка ошибок
		- Всегда проверяйте ошибки
		- Используйте типы ошибок для обработки
		- Логируйте ошибки для отладки

	3. Кодеки
		- Используйте стандартные кодеки
		- Создавайте кастомные кодеки при необходимости
		- Тестируйте совместимость кодек

	4. Пути HTTP
		- Используйте стандартные пути
		- Настраивайте кастомные пути при необходимости
		- Документируйте используемые пути

	=== СОВМЕСТИМОСТЬ ===

	Эти константы совместимы с:
	- rpc.Server и rpc.Client
	- Все функции пакета rpc
	- HTTP и TCP протоколы
	- Gob и JSON кодеки

	=== АЛЬТЕРНАТИВНЫЕ СПОСОБЫ ===

	// Вместо констант можно использовать переменные
	var (
		ErrShutdown        = errors.New("connection is shut down")
		ErrMethodNotFound  = errors.New("method not found")
		ErrServiceNotFound = errors.New("service not found")
	)

	Но использование предопределенных констант более стандартно.
*/
