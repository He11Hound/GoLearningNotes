package io

/*
	ИНТЕРФЕЙС WRITER

	type Writer interface {
		Write([]byte) (int, error)
	}

	Writer - это базовый интерфейс для записи данных в поток.
	Это один из самых важных интерфейсов в Go, так как он определяет
	стандартный способ записи данных в различные приемники.

	Основной метод:

	Write([]byte) (int, error)
		- Записывает данные из предоставленного буфера
		- Возвращает количество записанных байтов и ошибку
		- n может быть меньше len(p) даже если ошибки нет
		- Должен возвращать ошибку если не может записать данные
		- Не должен изменять буфер кроме чтения данных

	Поведение:
	- Write должен записать хотя бы один байт если возможно
	- Write может записать меньше байтов чем размер буфера
	- Write должен возвращать ошибку если не может записать данные
	- Write не должен изменять исходный буфер
	- Write должен быть идемпотентным для одинаковых данных

	Примеры реализации:
	- os.File (файлы)
	- bytes.Buffer (буфер в памяти)
	- strings.Builder (построение строк)
	- net.Conn (сетевые соединения)
	- bufio.Writer (буферизованная запись)

	Примеры использования:

	// Запись в файл
	file, err := os.Create("output.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	data := []byte("Hello, World!")
	n, err := file.Write(data)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Записано %d байтов\n", n)

	// Запись в буфер
	var buffer bytes.Buffer
	n, err = buffer.Write([]byte("Buffer content"))
	fmt.Printf("Записано в буфер: %s\n", buffer.String())

	// Запись строки
	n, err = io.WriteString(file, "String content")
	fmt.Printf("Записано строки: %d байтов\n", n)

	Особенности работы:
	- Writer может быть использован многократно
	- Writer должен обрабатывать частичные записи
	- Writer не обязан быть потокобезопасным
	- Размер буфера влияет на производительность

	Связь с другими интерфейсами:
	- WriterAt - для записи в определенную позицию
	- WriteCloser - для Writer с методом Close
	- WriteSeeker - для Writer с возможностью изменения позиции
	- ReadWriter - для Writer который также может читать

	Лучшие практики:
	- Всегда проверяйте ошибки после Write
	- Обрабатывайте частичные записи
	- Используйте io.Copy для копирования данных
	- Используйте io.WriteString для записи строк
	- Учитывайте размер буфера для производительности
	- Закрывайте Writer когда закончили работу
*/
