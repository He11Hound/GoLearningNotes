package io

/*
	КОНСТАНТЫ ПАКЕТА IO

	Пакет io предоставляет константы для работы с потоками данных.
	Эти константы используются в основном с функцией Seek для
	определения точки отсчета при изменении позиции в потоке.

	=== КОНСТАНТЫ ДЛЯ SEEK ===

	SeekStart = 0
		- Начало файла или потока
		- Используется для позиционирования относительно начала
		- offset = 0 означает начало файла
		- Положительный offset означает смещение от начала

	SeekCurrent = 1
		- Текущая позиция в файле или потоке
		- Используется для позиционирования относительно текущей позиции
		- offset = 0 означает остаться на текущей позиции
		- Положительный offset означает смещение вперед
		- Отрицательный offset означает смещение назад

	SeekEnd = 2
		- Конец файла или потока
		- Используется для позиционирования относительно конца
		- offset = 0 означает конец файла
		- Отрицательный offset означает смещение от конца
		- Положительный offset может расширить файл

	=== ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ ===

	// Позиционирование в начало файла
	file.Seek(0, io.SeekStart)

	// Позиционирование в конец файла
	file.Seek(0, io.SeekEnd)

	// Позиционирование относительно текущей позиции
	file.Seek(10, io.SeekCurrent)  // на 10 байтов вперед
	file.Seek(-5, io.SeekCurrent)  // на 5 байтов назад

	// Позиционирование на 100 байтов от начала
	file.Seek(100, io.SeekStart)

	// Позиционирование на 50 байтов от конца
	file.Seek(-50, io.SeekEnd)

	=== КОМБИНАЦИИ С ДРУГИМИ ФУНКЦИЯМИ ===

	// Чтение с определенной позиции
	file.Seek(100, io.SeekStart)
	data := make([]byte, 50)
	file.Read(data)

	// Запись в конец файла
	file.Seek(0, io.SeekEnd)
	file.Write([]byte("Добавляем в конец"))

	// Пропуск определенного количества байтов
	file.Seek(1024, io.SeekCurrent)

	// Возврат к началу файла
	file.Seek(0, io.SeekStart)

	=== ОСОБЕННОСТИ РАБОТЫ ===

	1. SeekStart (0)
		- Всегда позиционирует относительно начала файла
		- offset должен быть неотрицательным
		- Полезно для чтения с начала файла

	2. SeekCurrent (1)
		- Позиционирует относительно текущей позиции
		- offset может быть положительным или отрицательным
		- Полезно для относительного позиционирования

	3. SeekEnd (2)
		- Позиционирует относительно конца файла
		- offset обычно отрицательный
		- Полезно для чтения с конца файла

	=== ПРОВЕРКА ПОДДЕРЖКИ SEEK ===

	// Проверка, поддерживает ли Reader интерфейс Seeker
	if seeker, ok := reader.(io.Seeker); ok {
		seeker.Seek(0, io.SeekStart)
	}

	// Проверка, поддерживает ли Writer интерфейс Seeker
	if seeker, ok := writer.(io.Seeker); ok {
		seeker.Seek(0, io.SeekEnd)
	}

	=== РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ===

	1. Используйте SeekStart для абсолютного позиционирования
	2. Используйте SeekCurrent для относительного позиционирования
	3. Используйте SeekEnd для работы с концом файла
	4. Всегда проверяйте ошибки после вызова Seek
	5. Учитывайте, что не все потоки поддерживают Seek
	6. SeekEnd с положительным offset может расширить файл

	=== СОВМЕСТИМОСТЬ ===

	Эти константы совместимы с:
	- os.File.Seek()
	- bytes.Reader.Seek()
	- strings.Reader.Seek()
	- Любыми другими реализациями интерфейса Seeker

	=== АЛЬТЕРНАТИВНЫЕ СПОСОБЫ ===

	// Вместо SeekStart можно использовать
	file.Seek(0, 0)

	// Вместо SeekCurrent можно использовать
	file.Seek(10, 1)

	// Вместо SeekEnd можно использовать
	file.Seek(0, 2)

	Но использование именованных констант более читаемо и безопасно.
*/
