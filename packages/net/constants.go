package net

/*
	КОНСТАНТЫ ПАКЕТА NET

	Пакет net предоставляет константы для работы с сетевыми протоколами,
	адресами и операциями. Эти константы используются для указания типов
	сетей, протоколов и других параметров сетевых операций.

	=== КОНСТАНТЫ ДЛЯ ТИПОВ СЕТЕЙ ===

	"tcp" - TCP протокол (IPv4 и IPv6)
		- Надежный потоковый протокол
		- Используется для большинства интернет-приложений
		- Поддерживает как IPv4, так и IPv6

	"tcp4" - TCP протокол только IPv4
		- Ограничивает использование только IPv4
		- Полезно когда нужна совместимость только с IPv4
		- Быстрее чем "tcp" на системах без IPv6

	"tcp6" - TCP протокол только IPv6
		- Ограничивает использование только IPv6
		- Полезно для современных IPv6-only приложений
		- Требует поддержки IPv6

	"udp" - UDP протокол (IPv4 и IPv6)
		- Ненадежный дейтаграммный протокол
		- Используется для быстрых операций
		- Поддерживает как IPv4, так и IPv6

	"udp4" - UDP протокол только IPv4
		- Ограничивает использование только IPv4
		- Полезно для совместимости с IPv4
		- Быстрее чем "udp" на системах без IPv6

	"udp6" - UDP протокол только IPv6
		- Ограничивает использование только IPv6
		- Полезно для современных IPv6-only приложений
		- Требует поддержки IPv6

	"unix" - Unix сокеты (потоковые)
		- Межпроцессное взаимодействие
		- Используется для локального взаимодействия
		- Быстрее чем TCP для локальных соединений

	"unixgram" - Unix сокеты (дейтаграммы)
		- Межпроцессное взаимодействие через дейтаграммы
		- Используется для локального взаимодействия
		- Ненадежный но быстрый

	"unixpacket" - Unix сокеты (пакеты)
		- Межпроцессное взаимодействие через пакеты
		- Используется для локального взаимодействия
		- Сохраняет границы сообщений

	"ip" - IP протокол (IPv4 и IPv6)
		- Базовый протокол интернета
		- Используется для низкоуровневых операций
		- Поддерживает как IPv4, так и IPv6

	"ip4" - IP протокол только IPv4
		- Ограничивает использование только IPv4
		- Полезно для совместимости с IPv4
		- Используется для низкоуровневых операций

	"ip6" - IP протокол только IPv6
		- Ограничивает использование только IPv6
		- Полезно для современных IPv6-only приложений
		- Используется для низкоуровневых операций

	=== КОНСТАНТЫ ДЛЯ СЕТЕВЫХ ИНТЕРФЕЙСОВ ===

	FlagUp = 1 << iota
		- Интерфейс активен
		- Используется для проверки состояния интерфейса
		- Интерфейс может передавать данные

	FlagBroadcast
		- Интерфейс поддерживает широковещание
		- Используется для проверки возможностей интерфейса
		- Позволяет отправлять данные всем в сети

	FlagLoopback
		- Интерфейс является петлевым
		- Используется для идентификации loopback интерфейса
		- Данные отправляются обратно отправителю

	FlagPointToPoint
		- Интерфейс является point-to-point
		- Используется для идентификации P2P соединений
		- Соединение между двумя точками

	FlagMulticast
		- Интерфейс поддерживает multicast
		- Используется для проверки возможностей интерфейса
		- Позволяет отправлять данные группе получателей

	=== КОНСТАНТЫ ДЛЯ IP АДРЕСОВ ===

	IPv4len = 4
		- Длина IPv4 адреса в байтах
		- Используется для проверки размера адреса
		- Стандартная длина IPv4 адреса

	IPv6len = 16
		- Длина IPv6 адреса в байтах
		- Используется для проверки размера адреса
		- Стандартная длина IPv6 адреса

	=== СПЕЦИАЛЬНЫЕ IP АДРЕСА ===

	IPv4zero = "0.0.0.0"
		- Нулевой IPv4 адрес
		- Используется для прослушивания на всех интерфейсах
		- Эквивалентен "любой адрес"

	IPv6zero = "::"
		- Нулевой IPv6 адрес
		- Используется для прослушивания на всех интерфейсах
		- Эквивалентен "любой адрес" для IPv6

	IPv4bcast = "255.255.255.255"
		- Широковещательный IPv4 адрес
		- Используется для отправки всем в сети
		- Ограниченный широковещательный адрес

	IPv4allsys = "224.0.0.1"
		- Multicast адрес для всех систем
		- Используется для multicast операций
		- Стандартный multicast адрес

	IPv4allrouter = "224.0.0.2"
		- Multicast адрес для всех маршрутизаторов
		- Используется для multicast операций
		- Стандартный multicast адрес для маршрутизаторов

	IPv6allnodes = "ff01::1"
		- IPv6 multicast адрес для всех узлов
		- Используется для IPv6 multicast операций
		- Локальный scope multicast

	IPv6allrouters = "ff01::2"
		- IPv6 multicast адрес для всех маршрутизаторов
		- Используется для IPv6 multicast операций
		- Локальный scope multicast для маршрутизаторов

	=== ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ ===

	// TCP соединения
	conn, err := net.Dial("tcp", "example.com:80")
	conn, err := net.Dial("tcp4", "192.168.1.1:8080")
	conn, err := net.Dial("tcp6", "[::1]:8080")

	// UDP соединения
	conn, err := net.Dial("udp", "example.com:53")
	conn, err := net.Dial("udp4", "192.168.1.1:8080")
	conn, err := net.Dial("udp6", "[::1]:8080")

	// Unix сокеты
	conn, err := net.Dial("unix", "/tmp/socket")
	conn, err := net.Dial("unixgram", "/tmp/socket")
	conn, err := net.Dial("unixpacket", "/tmp/socket")

	// Прослушивание
	listener, err := net.Listen("tcp", ":8080")
	listener, err := net.Listen("tcp4", "0.0.0.0:8080")
	listener, err := net.Listen("tcp6", "[::]:8080")

	// Проверка флагов интерфейса
	if iface.Flags&net.FlagUp != 0 {
		fmt.Println("Интерфейс активен")
	}
	if iface.Flags&net.FlagBroadcast != 0 {
		fmt.Println("Интерфейс поддерживает широковещание")
	}
	if iface.Flags&net.FlagLoopback != 0 {
		fmt.Println("Это петлевой интерфейс")
	}

	// Проверка размера IP адреса
	if len(ip) == net.IPv4len {
		fmt.Println("Это IPv4 адрес")
	}
	if len(ip) == net.IPv6len {
		fmt.Println("Это IPv6 адрес")
	}

	// Использование специальных адресов
	listener, err := net.Listen("tcp", net.IPv4zero+":8080")
	listener, err := net.Listen("tcp6", "["+net.IPv6zero+"]:8080")

	=== ОСОБЕННОСТИ РАБОТЫ ===

	1. Типы сетей
		- "tcp" автоматически выбирает IPv4 или IPv6
		- "tcp4" и "tcp6" ограничивают версию IP
		- Unix сокеты работают только локально
		- UDP не гарантирует доставку данных

	2. Флаги интерфейсов
		- Флаги комбинируются с помощью битовых операций
		- FlagUp проверяется для активных интерфейсов
		- FlagLoopback идентифицирует петлевые интерфейсы
		- FlagMulticast проверяется для multicast операций

	3. IP адреса
		- IPv4len и IPv6len используются для проверки размера
		- Специальные адреса имеют предопределенные значения
		- IPv4zero и IPv6zero используются для прослушивания
		- Multicast адреса используются для групповых операций

	=== РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ===

	1. Выбор типа сети
		- Используйте "tcp" для большинства приложений
		- Используйте "tcp4" или "tcp6" для специфических требований
		- Используйте "udp" для быстрых операций
		- Используйте "unix" для локального взаимодействия

	2. Работа с интерфейсами
		- Проверяйте FlagUp перед использованием интерфейса
		- Используйте FlagLoopback для идентификации петлевых интерфейсов
		- Проверяйте FlagMulticast для multicast операций
		- Комбинируйте флаги с битовыми операциями

	3. Работа с IP адресами
		- Используйте IPv4len и IPv6len для проверки размера
		- Используйте специальные адреса для прослушивания
		- Используйте multicast адреса для групповых операций
		- Проверяйте валидность адресов перед использованием

	=== СОВМЕСТИМОСТЬ ===

	Эти константы совместимы с:
	- net.Dial() и net.Listen()
	- net.Interface.Flags
	- net.IP операции
	- Все функции пакета net

	=== АЛЬТЕРНАТИВНЫЕ СПОСОБЫ ===

	// Вместо строковых констант можно использовать переменные
	const (
		TCP  = "tcp"
		TCP4 = "tcp4"
		TCP6 = "tcp6"
		UDP  = "udp"
		UDP4 = "udp4"
		UDP6 = "udp6"
	)

	Но использование строковых литералов более читаемо и стандартно.
*/
