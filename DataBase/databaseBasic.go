package main

import (
	"database/sql"
	"errors"
	"fmt"
	_ "github.com/lib/pq"
	"log"
	"time"
)

/*
–ò–∑—É—á–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ databse/sql

–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–¥ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å (init —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞) –¥—Ä–∞–π–≤–µ—Ä –±–¥ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –≤ import –ø–µ—Ä–µ–¥–∞—ë–º —á–µ—Ä–µ–∑ _ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Å –¥—Ä–∞–π–≤–µ—Ä–æ–º

–°–∞–º–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é sql.Open("driverName", "connectionString")
	driverName - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞, —É–∫–∞–∑–∞–Ω –≤ init —Ñ—É–Ω–∫—Ü–∏–∏
	connectionString - —Å—Ç—Ä–æ–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

	–ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î! –û–Ω–∞ —Ç–æ–ª—å–∫–æ:
		–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥—Ä–∞–π–≤–µ—Ä (–µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
		–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É sql.DB —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–ª–µ–Ω–∏–≤–æ–µ" —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ

sql.DB - —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

db.Close() –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª–µ:

db.Query() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç *sql.Rows, error - —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π

db.QueryRow() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω Row, –±–µ–∑ –æ—à–∏–±–∫–∏, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è–º Scan, –∏ —É–∂–µ —Ç—É—Ç –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤—Å—ë —Ç–∞–∫–∏ –±—ã–ª –ø—É—Å—Ç—ã–º, —Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

db.Exec() –¥–ª—è Insert –∑–∞–ø—Ä–æ—Å–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ sql.Result - –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–æ, –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫.

sql.Result.LastInsertId() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–æ—á–Ω—ã–π ID, Postgres - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
sql.Result.RowsAffected() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π, Postgres - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è

rows.Close() –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ:
	–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—É–ª
	–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
	–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –¥—Ä–∞–π–≤–µ—Ä–∞

rows.Next() –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∫—É—Ä—Å–æ—Ä –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ:
rows.Scan() –∫–æ–ø–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:


–†–∞–±–æ—Ç–∞ —Å NULL-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
–í SQL –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ NULL, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ø–æ–ª–µ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –û–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä, NULL –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∏—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–Ω–∞—á–µ–Ω–∏—è (–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ).  –ß—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –ø–∞–∫–µ—Ç database/sql —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏–ø—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å Null: sql.NullString, sql.NullInt64, sql.NullFloat64, sql.NullByte –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
*/

/*
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞

–¢–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –ø–∏—à–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —Ä—É–∫–∞–º–∏, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ç–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –≤—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∑–∞–ø—Ä–æ—Å
–ï—Å—Ç—å 3 —Å–ø–æ—Å–æ–±–∞
	–ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π:
		–í SQL-–∑–∞–ø—Ä–æ—Å–µ —Ç–∞–º, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä, —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ ? - rows, err := db.Query("SELECT product FROM products WHERE price > ?", 500)
	–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π:
		–í–º–µ—Å—Ç–æ ? –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞–∫ $ –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–¥—ë—Ç —á–∏—Å–ª–æ, –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
		rows, err := db.Query("SELECT product FROM products WHERE price > $1", 500)
	–ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ. –í –∑–∞–ø—Ä–æ—Å–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –∏–¥—ë—Ç –∑–Ω–∞–∫ : !!!!!!!!!!!! üîç POSTGRES - –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢  üîç!!!!!!!!!
		–í –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ sql.NamedArg. –ß—Ç–æ–±—ã –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å, –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é Named() –∏–∑ –ø–∞–∫–µ—Ç–∞ database/sql. –í –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ:
		rows, err := db.Query("SELECT product FROM products WHERE price > :price", sql.Named("price", 500))
*/

func main() {
	db, err := ConnectToDB()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err)
	}

	defer db.Close()

	//SimpleDeleteQuery(db)
	//SimpleUpdateQuery(db)
	//SimpleInsertQuery(db)

	//order := SimpleSelectWithOneRoew(db)
	//fmt.Println(order)

	//orders, err := SimpleSelectQuery(db)
	//if err != nil {
	//	log.Fatal(err)
	//}
	//
	//if len(orders) > 0 {
	//	for _, order := range orders {
	//		fmt.Println(order)
	//	}
	//}

}

type Order struct { //–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä—É—Ç—É—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
	ID          int
	UserID      int
	TotalAmount float64
	Status      string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func ConnectToDB() (*sql.DB, error) {
	connStr := "host=postgres user=go_user password=go_password dbname=go_learning_db sslmode=disable"
	return sql.Open("postgres", connStr) //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—É–ª–∞ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
}

func SimpleSelectQuery(db *sql.DB) ([]Order, error) { //–†–∞–±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
	var orders []Order

	rows, err := db.Query("SELECT id, user_id, total_amount, status, created_at, updated_at FROM orders") //–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º

	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
		return orders, errors.New("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
	}

	defer rows.Close() //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—É–ª

	for rows.Next() { //–ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
		var o Order
		err := rows.Scan(&o.ID, &o.UserID, &o.TotalAmount, &o.Status, &o.CreatedAt, &o.UpdatedAt) //–∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å–æ–≥–ª–∞—Å–Ω–æ –æ—á–µ—Ä—ë–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —è —Ç–∞–∫ –ø–æ–ª–∞–≥–∞—é
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏:", err)
			continue
		}
		orders = append(orders, o) // –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–∞–π—Å
	}

	if err = rows.Err(); err != nil { //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º:", err)
	}

	return orders, nil
}

func SimpleSelectWithOneRow(db *sql.DB) Order {
	var order Order

	row := db.QueryRow("SELECT id, user_id, total_amount, status, created_at, updated_at FROM orders LIMIT 1")

	err := row.Scan(&order.ID, &order.UserID, &order.TotalAmount, &order.Status, &order.CreatedAt, &order.UpdatedAt)

	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏:", err)
	}

	return order
}

func SimpleInsertQuery(db *sql.DB) {
	now := time.Now()

	res, err := db.Exec(
		`INSERT INTO orders (user_id, total_amount, status, created_at, updated_at)
		 VALUES ($1, $2, $3, $4, $5)`,
		2,
		1200.25,
		"pending",
		now,
		now,
	)

	if err != nil {
		fmt.Println(err)
		return
	}

	fmt.Println(res.LastInsertId())
	fmt.Println(res.RowsAffected())
	return
}

func SimpleUpdateQuery(db *sql.DB) {
	res, err := db.Exec(
		`UPDATE orders SET total_amount = $1 WHERE id = $2`,
		1555.55,
		4,
	)

	if err != nil {
		fmt.Println(err)
		return
	}

	fmt.Println(res)

	return
}

func SimpleDeleteQuery(db *sql.DB) {
	_, err := db.Exec(
		`DELETE FROM orders WHERE id = $1`,
		11,
	)

	if err != nil {
		fmt.Println(err)
		return
	}
}
