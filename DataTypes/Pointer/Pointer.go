package Pointer

import (
	"fmt"
	"unsafe"
)

func MakePointer() {
	//Указатель — это переменная, которая хранит адрес другой переменной.

	//p := &x        // p хранит адрес переменной x
	//fmt.Println(p) // например, 0xc000014098
	//fmt.Println(*p) // разыменование: 10

	//Сам по себе указатель это тоже переменная и тоже занимает место в памяти
	//На 32-битной системе адрес умещается в uint32 (0 … 4 294 967 295).
	//На 64-битной системе адрес умещается в uint64 (0 … 18 446 744 073 709 551 615).

	number := 125

	var ExamplePointer1 *int = &number //Полная запись, перед переменной, на которую создаём указатель используем &
	var ExamplePointer3 *int           //Короткая запись, опуская значение, без дальнейшего присвоения использование получение значения (*) будет вызывать панику,
	ExamplePointer2 := &number         // Короткая запись,  перед переменной, на которую создаём указатель используем &

	fmt.Println("Указатель 1:", *ExamplePointer1) // Без * мы получим лишь адрес ячейки в формате int, Чтобы получить само значение используем *
	fmt.Println("Указатель 2:", *ExamplePointer2)
	fmt.Println("Указатель 3:", ExamplePointer3) //Если захотим получить значение, через * словим панику, а сейчас получаем адрес ячейки, но так как он не задан видим nil

	//При работе с функциями мы ВСЕГДА передаём копию объекта, то есть в оперативной памяте буквально создаётся копия переменной
	//В некоторых ситуациях это может сильно аффектить на систему, чтобы избежать этого созданы указатели
	//Передавая их в параметры функции и взаимодействуя с ними мы будем изменять исходный объект
}

func NewAndMake() {
	//new(T) — создаёт указатель на нулевое значение типа T.
	//make(T, ...) — используется для срезов, карт и каналов (возвращает инициализированное значение, а не указатель).

	p := new(int) // *int, значение 0
	fmt.Println(*p)

	s := make([]int, 5) // срез из 5 элементов
	fmt.Println(s)
}

func Increment(x *int) {
	*x++ //стоит отметить что при работе с указателем внутри функции также нужно разыменовывать переменную, то есть добавлять *
}

func getAddress() uintptr {
	//Если нужно работать с адресами как с числами:
	x := 10
	p := &x
	return uintptr(unsafe.Pointer(p)) // адрес как число
}
